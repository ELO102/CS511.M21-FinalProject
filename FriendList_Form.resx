<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAL1OAAC9TgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKbvOACu+zwAtwssAMszAACu/zgEswM4ELMDNBSzA
        zgQsv84DLMDOBCzAzQQswM0EK7/OAiu+zwAqvs8AK7/OACu+zwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACq60gArvdAAK73QACq70QIqu9IDHIH/ACaq
        3wApttYAAAAAAAAAAAAAAAAAH4PyACq70gAqu9IAKrrTAiq70QQqutIBKrvSACq70gAqudMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACm11wApttYAKbfVACm21QEpttYDK77PASy/
        zgAswcwQLMHNSSzBzXwswcydLMLMqizBzKYswcyPLMHNZizBzSssyMUBKb3PACm31QIpt9UDKbjUACm4
        1AApttYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnsdsAKLLZACiy2QAostkCKbXXAyq6
        0wAqvNEnK73QmCu90Okrvs//K73Q/iu90P8rvdD/K73Q/yu90P8rvs//K77P+yu90MgrvNFeKr3QBSvD
        ywAos9gDKLLZACiy2gAosdoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJqvfACet3QAnrd0AJ7DaAiKZ
        7QApt9UFKbjUhSq50/kqudP/KrjU/yq41PoqudTVKrnTsiq506IqudOoKrnTwSq51OoquNT/KrnU/iq5
        0/8qudTQKbfVNim31QAosdoEJ7DbACau3QAmrd4AAAAAAAAAAAAAAAAAAAAAAAAAAAAlqOEAJajhACev
        3AIpuNQAKLLZFii02MQptdf/KLTY/yi02OcptdeAKbXWKiav2wMlr9wAKLPYACq51AArvtAAKLTXECm1
        1k4ptNe4KLTY/ii01/8ptNf8KLPYZii01wAnrtwEO/+ZACao4QAlp+IAAAAAAAAAAAAAAAAAJKLlACSj
        5AAnrt0BKLTYACeu3RYnsNvTJ7Db/yev3P8nsNucKLHaESiz2QAnsNsBL8fGACu80QMqu9IEKrvRAyy/
        zgEhjvAAKLLaASiz2QAosdpJJ6/b4Sev2/8nsNv/J6/cbyex2wAmq94DIpbtACSi5QAinugAAAAAACaW
        5gAjnOgAJ6/cACKV6wAjneoCJqvfvSar3/8mq9/9JqzeaSar3gAnrtwCKrjUAyan4AQkouQDJJ7nASOd
        6AIjnegCJKHlASm21gEpttYEKLPYBCeu3QAnrd0WJqvfyCar3/8mq9//JqrgTyas3gAmquADI5nrACOc
        6QAAAAAAIpbsACau3QAlpeMDJafiACWl430lpeP/JaXj/yWm4mwlpeMAJqzeBSq70gElpOMEJabiAyWm
        4gAlpuIAH43xAEf/nAApsd0AIpbsAyKX7AOg/wAAJ67cBCSk5AAlqOESJaXj0iWl4/8lpePiJKPkFyWm
        4gAlpuIBIpbsAAAAAAAhkfAAJJ/mAiSf5wAknuciJJ/m7iSf5/8koOahI53oACWn4gUkoeUDJKDmACSf
        5zckn+e6I57oKyWi5QgjnuckI57nIiSg5gojnegAIpfsACGR7wMAAP8AJabiBCOd6AAkoOYyJJ/n9CSf
        5v8kn+ePJKHlACSg5gMjnegAIZDwACKT7gAjmuoEI5rqACOZ6ocjmer/I5nq6yOb6h4hlO4AI5vpAiKZ
        6gMjnOgAI5nqNCOa6v8jmur0I5nq5SOa6vwjmur7I5nq5iKZ66cimOsxIpfsACGQ8AMnstoAI53oBSKY
        6wAjmuqJI5nq/yOa6usimOsbIpnqACOZ6gEgi/QAIZPuASGS7wAiku8HIZTu2CGU7v8hlO6QIZLvACKV
        7QQaoOkAIo/wAiGW7QAhk+6HIZPu/yGU7vsilO7/IZTu/yGU7v8ilO7+IpTu/yKU7v8hk+5zIZXtACKP
        8AIhlO4CIZHwACKU7SIhlO7xIZTu/yGU7mghlO4AIZTuBCOG9QAgjvIDII7yACCO8jYgjvL/II7y/yCO
        8T0gjfIAII3yAyCO8gMgj/IAII3ydCCO8v8gjvL7II7y/CCO8v4gjvL9II7y/CCO8vwgjvL7II7y/CCO
        8f8gjfJoH47yACCO8gMgjvECIIvzACCO8rMgjvL/II7yqyCO8QAgjvEDIYzyACCI9QQgiPUAIIj1ZCCI
        9f8giPXlIIr0ECCI9QAgiPUDIIf2ACCH9iIgiPX1H4j1+yCI9fogiPX/H4j1+yCI9f4giPX7IIj1/R+I
        9f0giPX9IIj1/yCI9e0gh/YaH4f2ACCH9gUgh/YAIIj1eCCI9f8giPXWIIj2BCCI9QAgiPUBKIT0BCiE
        9AAohPSCKIT0/yiE9MkrgfQALIL0ASiE9AQohPQAKIT0dyiE9P8ohPT0J4T0nCeE9NYphPT/KIT07SSF
        9UEohPS7KYT0/yiE9PsohPT7KIT0/ymE9GoohPQAKIT0ByiE9AAohPRUKIT0/yiE9OwohPQUKIT0ACiE
        9AE0gfEENIHxADSB8Y40gfH/NIHxvTSA8QA0gPECNIHxBDSB8QA0gfGoNIHx/zSB8f81gPHeNoDxMDGC
        8n80gfFPMILyACKH9QszgfHENYDx/zSB8fk0gfH/NIHxmzSB8QA0gfEHNIHxADSB8UY0gfH/NIHx9DSB
        8Rw0gfEANIHxAj997wQ/fe8AQH3uhz997/9Afe7EPH7vADx+7wFAfe4DQH3uAEB97q0/fe//QH3u+j99
        7/9Afe7cSXrsG0N87gBAfe55QXzus0J87jo+fe/NQH3u/z997/9Afe6gQH3uAD997gc/fe8AQH3uTkB9
        7v9Afe/wQH3vGEB97wBAfe8CS3nsBEt57ABLeexuS3ns/0t57N1PeOsITHnsAEx57AVMeewAS3nshkt5
        7P9Leez7S3ns/Et67P9LeuzOTXnrd0t67P5Keuz/S3ns7Ux567RLeuzzS3ns/0t57HdLeewAS3rsCEp6
        7ABLeexsS3ns/0t57N5LeuwJS3nsAEt67AFXdukDV3bpAFZ26URXdun/V3bp/Vh26S1Wd+oAVnbpBVZ2
        6QBVduk2V3bp/1d26fxXdun/V3bp/VZ26f5Wdun/V3bp/Vd26ftXdun+Vnbp/ld26fxXdun7VXbpK1V2
        6QBWdukFVHfqAFd26aFXdun/V3bpulh26QBYdukCVXbqAGBy5wFgcucAYHPnE2Fy5+dhcuf/YXLmdl9z
        5wBhcuYEYnHmAmRx5gBhcueaYXLm/2Fy5/lhcuf9YXLm/WFy5vxhcuf+YXLn/2Fy5/xhcuf3YXLm/2Fy
        541jceYAYXLnBFt26QBjceYQYXLn4mFy5/9hcud9YnLmAGJy5gRReOoAZHDlAGlt5ANqbeMAaG7komhu
        5P9obuTVbGvjCSac/QBobuQBkGHaAGJx5gZnbuSvaG3k/2ht5P1obuT+aG7k/Ghu5PxobuT+aG3k/Wht
        5P9nbuSlWnbpAxiN+ABrbOMFZm/lAGht5GhobuT/aG7k+Wdu5C9obuQAaG7kAlF46wBcdOgAb2nhAm9p
        4QBuauI8b2ni/m5p4v9vaeF3bWriAHZk3wVddOgBXHXoAW1q4wJtauJpbmni3W9p4f9vaeH+b2nh/29p
        4f9uaeLabWriYmFx4ABbdegCcmfgA2Bz5wBxaOEUb2ni3m9p4v9vaeKvcmfgAHFo4QJuauIAW3ToAGRw
        5QB4Yt4AdmTfAnli3gB1Zd+kdWTf/3Vl3/V2ZN88dWTfAIBd2wVrbOMBZm/lAnFn4AB2ZN8Gc2bgM3Nm
        4FNzZuBSc2bgMHZk3wVyZ+AAY3HmAnph3QOCXNoDcWfgAHZk36h1Zd//dWTf+HRl4DN2ZN8AdmTfAmRw
        5QAAAAAAaWzjAGtr4wB8YNwBfV/cAHli3hl8YN3hfGDd/3xg3eh+X9wxf17cAIdZ2QSIWNgEb2nhBGhu
        5AFobuQAa2zjAG9p4gBqbOMAam3jAXZk3wWIWNgEg1vaAXhi3gB8YNyTfGDd/3xg3P97YN19fl/cAHph
        3QMA/P8Aa2vjAAAAAAAAAAAAcmfgAHFn4QB/XtsDhFvaAIFd2zyDW9r1g1za/4Jc2vCEW9pYhVnZAIFd
        2wGWTtMBjlTWBIZZ2QeDW9oHg1vaB4dZ2QeOVNYDhVrZAYdY2ACFWtkVg1vasIJc2v+DW9r/glzappFS
        1AB6Yt0CjFXXAHJn4ABwaOEAAAAAAAAAAAB2ZN8AeWLeAHdj3gCCXNoDilfYAIhY2EKJV9jwilfX/4lX
        2P+KV9e1i1bXPINb2gOBXdsAiVfYAAAAAACAXdsAjVTWAZFS1QCLVtcWi1bXdIlX2OiJV9j/ilfX/4lX
        2KWBXdsDdGXfAYVa2QF5Yt4AeGPeAAAAAAAAAAAAAAAAAAAAAAB+X9wAgF7bAH9e2wCGWdkDj1PWAI5U
        1iaQU9XHkVLV/5BT1f6PU9X+kFLV05FS1ZiRUtVwkVLVX5FS1WWRUtWAkFLVs5BT1e6PU9X/kFLV/5BS
        1fiPU9Z1j1PVAINb2gKFWtkBf17bAH9e2wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFWtkAh1nYAIdZ
        2QCIWNgDbmniAJdO0gOVT9Njl07T15dO0v+XTtP/l07T/5ZO0/+WTtP/lk7T/5dO0/+XTtP+l07S/5dO
        0vWWT9OklU/TJ5NR1ACLVtcDhlnZAYZZ2QCGWdkAhFraAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACLVtcAjlTWAI1U1gCNVdYCj1PWAplM0gCeSdAGm0vRQ5tL0YybS9G9m0vR2JtL0eKbS9Hfm0vRzZtL
        0aibS9FrnErRHphN0gCVT9MBjVXWA41V1gCNVdYAjFXXAIlX1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACRUtUAk1DUAJNR1ACTUdQBlFDUBJFS1QGSUdQAmE3SAJpL0gCZTNIEmkzSC5pM
        0giTUNMAlU/TAJtL0QCbTNEAk1HUA5RQ1AKWT9MAlk/TAJJR1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmE3SAJpM0QCZTNIAmU3SAZpM0QOaS9EEmkzRAqBI
        0ACcStEAmU3SAJhN0gCaTNEDmkvRBJpM0QKNVdcAyim6AJlN0gCWTtMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACbS9EAnErRAKtA
        0wCbS9EAm0vRAZtL0QGbS9EBm0vRAJtL0QCbS9EAm0vRAJtL0QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/yAF//yL0X/6IASf9IABL+gAAJfUAkBHqBAIK4BABBWQhEIJISAlCSEg
        CoRCIASEQkACREKAAUJEgAFCRICBQkSBAUJCgAFCQoABREJAAoQhQACEIQAJCRCIEQmQQkIVqCAII9QF
        IAvqAACX5AABL/pABF/9FCk//0KC///4F/8=
</value>
  </data>
</root>